//Given an integer array nums, handle multiple queries of the following types:

//Update the value of an element in nums.
//Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
//Implement the NumArray class:

//NumArray(int[] nums) Initializes the object with the integer array nums.
//void update(int index, int val) Updates the value of nums[index] to be val.
//int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

//Example 1:

//Input
//["NumArray", "sumRange", "update", "sumRange"]
//[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
//Output
//[null, 9, null, 8]

   int[] prefix;
    public NumArray(int[] nums) {
        this.prefix = new int[nums.length + 1];
        int temp = 0;
        for(int i = 0; i < nums.length; i++){
            temp += nums[i];
            prefix[i + 1] = temp;
        }
    }

    public void update(int i, int val) {
        int before = prefix[i + 1] - prefix[i];
        if(val > before){
            for(int j = i + 1; j < prefix.length; j++){
                prefix[j] += (val - before);
            }
        } else {
            for(int j = i + 1; j < prefix.length; j++){
                prefix[j] -= (before - val);
            }
        }
    }

    public int sumRange(int i, int j) {
        return prefix[j + 1] - prefix[i];
    }

//time complexity of O(N)